{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"Veracode Static Analysis Pipeline Scan","rules":[{"id":"89","name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","shortDescription":{"text":"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"},"helpUri":"https://cwe.mitre.org/data/definitions/89.html","properties":{"security-severity" : "9.8","category":"taint","tags":["taint"]},"defaultConfiguration":{"level":"error"}},{"id":"259","name":"Use of Hard-coded Password","shortDescription":{"text":"CWE-259: Use of Hard-coded Password"},"helpUri":"https://cwe.mitre.org/data/definitions/259.html","properties":{"category":"crypto","tags":["crypto"]},"defaultConfiguration":{"level":"error"}},{"id":"73","name":"External Control of File Name or Path","shortDescription":{"text":"CWE-73: External Control of File Name or Path"},"helpUri":"https://cwe.mitre.org/data/definitions/73.html","properties":{"category":"taint","tags":["taint"]},"defaultConfiguration":{"level":"error"}},{"id":"113","name":"Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')","shortDescription":{"text":"CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')"},"helpUri":"https://cwe.mitre.org/data/definitions/113.html","properties":{"category":"taint","tags":["taint"]},"defaultConfiguration":{"level":"error"}},{"id":"502","name":"Deserialization of Untrusted Data","shortDescription":{"text":"CWE-502: Deserialization of Untrusted Data"},"helpUri":"https://cwe.mitre.org/data/definitions/502.html","properties":{"category":"taint","tags":["taint"]},"defaultConfiguration":{"level":"error"}},{"id":"117","name":"Improper Output Neutralization for Logs","shortDescription":{"text":"CWE-117: Improper Output Neutralization for Logs"},"helpUri":"https://cwe.mitre.org/data/definitions/117.html","properties":{"category":"taint","tags":["taint"]},"defaultConfiguration":{"level":"error"}},{"id":"352","name":"Cross-Site Request Forgery (CSRF)","shortDescription":{"text":"CWE-352: Cross-Site Request Forgery (CSRF)"},"helpUri":"https://cwe.mitre.org/data/definitions/352.html","properties":{"category":"crypto","tags":["crypto"]},"defaultConfiguration":{"level":"error"}},{"id":"80","name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","shortDescription":{"text":"CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)"},"helpUri":"https://cwe.mitre.org/data/definitions/80.html","properties":{"category":"taint","tags":["taint"]},"defaultConfiguration":{"level":"error"}},{"id":"614","name":"Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","shortDescription":{"text":"CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"},"helpUri":"https://cwe.mitre.org/data/definitions/614.html","properties":{"category":"crypto","tags":["crypto"]},"defaultConfiguration":{"level":"warning"}}]}},"results":[{"level":"error","rank":4,"message":{"text":"<span>This database query contains a SQL injection flaw.  The call to org.springframework.jdbc.core.JdbcOperations.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"com/example/dao/ActivityDaoImpl.java"},"region":{"startLine":22}},"logicalLocations":[{"name":"findTransactionsByCashAccountNumber","fullyQualifiedName":"com.example.dao.ActivityDaoImpl.findTransactionsByCashAccountNumber","kind":"function"},{"fullyQualifiedName":"org.springframework.jdbc.core.JdbcOperations.query","kind":"member","parentIndex":0}]}],"ruleId":"89","partialFingerprints":{"flawHash":"1820106768","flawHashCount":"1","flawHashOrdinal":"1","causeHash":"202715391","causeHashCount":"1","causeHashOrdinal":"1","procedureHash":"3664968015","prototypeHash":"1361916286"}},{"level":"error","rank":4,"message":{"text":"<span>This database query contains a SQL injection flaw.  The call to org.springframework.jdbc.core.JdbcOperations.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"com/example/dao/ActivityDaoImpl.java"},"region":{"startLine":30}},"logicalLocations":[{"name":"findTransactionsByCustomerName","fullyQualifiedName":"com.example.dao.ActivityDaoImpl.findTransactionsByCustomerName","kind":"function"},{"fullyQualifiedName":"org.springframework.jdbc.core.JdbcOperations.query","kind":"member","parentIndex":0}]}],"ruleId":"89","partialFingerprints":{"flawHash":"1820106768","flawHashCount":"1","flawHashOrdinal":"1","causeHash":"202715391","causeHashCount":"1","causeHashOrdinal":"1","procedureHash":"858827683","prototypeHash":"255463693"}},{"level":"error","rank":4,"message":{"text":"<span>This database query contains a SQL injection flaw.  The call to org.springframework.jdbc.core.JdbcOperations.query() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to query() contains tainted data from the variable str. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"com/example/dao/AccountDaoImpl.java"},"region":{"startLine":54}},"logicalLocations":[{"name":"findUsersByUsername","fullyQualifiedName":"com.example.dao.AccountDaoImpl.findUsersByUsername","kind":"function"},{"fullyQualifiedName":"org.springframework.jdbc.core.JdbcOperations.query","kind":"member","parentIndex":0}]}],"ruleId":"89","partialFingerprints":{"flawHash":"1989407704","flawHashCount":"1","flawHashOrdinal":"1","causeHash":"1771625766","causeHashCount":"1","causeHashOrdinal":"1","procedureHash":"2093025629","prototypeHash":"3768016964"}},{"level":"error","rank":3,"message":{"text":"<span>This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodepasswdset</span> <span>Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/259.html\">CWE</a></span>"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"com/example/security/CustomAuthenticationProvider.java"},"region":{"startLine":43}},"logicalLocations":[{"name":"authenticate","fullyQualifiedName":"com.example.security.CustomAuthenticationProvider.authenticate","kind":"function"},{"fullyQualifiedName":"hardcodepasswdset","kind":"member","parentIndex":0}]}],"ruleId":"259","partialFingerprints":{"flawHash":"1947019346","flawHashCount":"1","flawHashOrdinal":"1","causeHash":"2647456707","causeHashCount":"1","causeHashOrdinal":"1","procedureHash":"440660171","prototypeHash":"701281591"}},{"level":"error","rank":3,"message":{"text":"<span>This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodepasswdset</span> <span>Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/259.html\">CWE</a></span>"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"com/example/security/CustomAuthenticationProvider.java"},"region":{"startLine":69}},"logicalLocations":[{"name":"authenticate","fullyQualifiedName":"com.example.security.CustomAuthenticationProvider.authenticate","kind":"function"},{"fullyQualifiedName":"hardcodepasswdset","kind":"member","parentIndex":0}]}],"ruleId":"259","partialFingerprints":{"flawHash":"732100848","flawHashCount":"1","flawHashOrdinal":"1","causeHash":"1742417250","causeHashCount":"1","causeHashOrdinal":"1","procedureHash":"440660171","prototypeHash":"701281591"}},{"level":"error","rank":3,"message":{"text":"<span>This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/73.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Path_Traversal\">OWASP</a></span>"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"com/example/facade/StorageFacadeImpl.java"},"region":{"startLine":24}},"logicalLocations":[{"name":"load","fullyQualifiedName":"com.example.facade.StorageFacadeImpl.load","kind":"function"},{"fullyQualifiedName":"java.io.File.!operator_javanewinit","kind":"member","parentIndex":0}]}],"ruleId":"73","partialFingerprints":{"flawHash":"3371367996","flawHashCount":"1","flawHashOrdinal":"1","causeHash":"3452659514","causeHashCount":"1","causeHashOrdinal":"1","procedureHash":"423682051","prototypeHash":"100262086"}},{"level":"error","rank":3,"message":{"text":"<span>This call to javax.servlet.http.HttpServletResponse.setHeader() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. </span> <span>Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/113.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/HTTP_Response_Splitting\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"com/example/controllers/DashboardController.java"},"region":{"startLine":127}},"logicalLocations":[{"name":"getCertificate","fullyQualifiedName":"com.example.controllers.DashboardController.getCertificate","kind":"function"},{"fullyQualifiedName":"javax.servlet.http.HttpServletResponse.setHeader","kind":"member","parentIndex":0}]}],"ruleId":"113","partialFingerprints":{"flawHash":"1475711024","flawHashCount":"1","flawHashOrdinal":"1","causeHash":"1190406560","causeHashCount":"1","causeHashOrdinal":"1","procedureHash":"3508822117","prototypeHash":"2501359300"}},{"level":"error","rank":3,"message":{"text":"<span>The serialized-object data stream used in the call to java.io.ObjectInput.readObject() appears to have been constructed with untrusted data. Attacker manipulation of this stream has the ability to cause the creation of objects of arbitrary Serializable types.  Paired with a weakness in another class's constructor, this could result in a denial of service, code execution, or data corruption vulnerability. readObject() was called on the ois object, which contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid passing untrusted data; if the data is untrusted, consider switching to a safer serialization scheme such as JSON.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/502.html\">CWE</a></span>"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"com/example/controllers/DashboardController.java"},"region":{"startLine":144}},"logicalLocations":[{"name":"processSimple","fullyQualifiedName":"com.example.controllers.DashboardController.processSimple","kind":"function"},{"fullyQualifiedName":"java.io.ObjectInput.readObject","kind":"member","parentIndex":0}]}],"ruleId":"502","partialFingerprints":{"flawHash":"1728330308","flawHashCount":"2","flawHashOrdinal":"1","causeHash":"2866949028","causeHashCount":"1","causeHashOrdinal":"1","procedureHash":"2658897585","prototypeHash":"3488156492"}},{"level":"error","rank":3,"message":{"text":"<span>This call to javax.servlet.http.HttpServletResponse.setHeader() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. </span> <span>Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/113.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/HTTP_Response_Splitting\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"com/example/controllers/DashboardController.java"},"region":{"startLine":170}},"logicalLocations":[{"name":"getMaliciousCertificate","fullyQualifiedName":"com.example.controllers.DashboardController.getMaliciousCertificate","kind":"function"},{"fullyQualifiedName":"javax.servlet.http.HttpServletResponse.setHeader","kind":"member","parentIndex":0}]}],"ruleId":"113","partialFingerprints":{"flawHash":"220961366","flawHashCount":"1","flawHashOrdinal":"1","causeHash":"3619768857","causeHashCount":"1","causeHashOrdinal":"1","procedureHash":"1233329839","prototypeHash":"3428715133"}},{"level":"error","rank":3,"message":{"text":"<span>This call to org.slf4j.Logger.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"com/example/controllers/ActivityController.java"},"region":{"startLine":89}},"logicalLocations":[{"name":"viewActivityByCreditNumber","fullyQualifiedName":"com.example.controllers.ActivityController.viewActivityByCreditNumber","kind":"function"},{"fullyQualifiedName":"org.slf4j.Logger.info","kind":"member","parentIndex":0}]}],"ruleId":"117","partialFingerprints":{"flawHash":"4033475385","flawHashCount":"1","flawHashOrdinal":"1","causeHash":"1859112423","causeHashCount":"1","causeHashOrdinal":"1","procedureHash":"313965367","prototypeHash":"1067892832"}},{"level":"error","rank":3,"message":{"text":"<span>This application seems to be explicitly disabled default secure protection provided by Spring Security framework against cross site request forgery attacks. If this disabled protection is deployed in production environments, it could allow a malicious web application to influence the interactions between (trusted) client browser and web-server.</span> <span>Make sure this disabled protection configuration is not deployed in real time production environment. Additional protection mechanisms against CSRF attacks are discussed in references.</span> <span>References: <a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\">OWASP</a><br><a href=\"https://docs.spring.io/spring-security/reference/features/exploits/csrf.html\">CSRF Protection in Spring Security</a><br><a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE 352</a></span>"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"com/example/config/SecurityConfig.java"},"region":{"startLine":28}},"logicalLocations":[{"name":"configure","fullyQualifiedName":"com.example.config.SecurityConfig.configure","kind":"function"},{"fullyQualifiedName":"disable","kind":"member","parentIndex":0}]}],"ruleId":"352","partialFingerprints":{"flawHash":"746772198","flawHashCount":"1","flawHashOrdinal":"1","causeHash":"2262816797","causeHashCount":"1","causeHashOrdinal":"1","procedureHash":"833375910","prototypeHash":"1576793238"}},{"level":"error","rank":3,"message":{"text":"<span>This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable account.getUsername(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/webapp/WEB-INF/jsp/userDetail.jsp"},"region":{"startLine":114}},"logicalLocations":[{"name":"_jspService","fullyQualifiedName":"com.veracode.compiledjsp.xinsecurebankwar.WEB_002dINF.jsp.userDetail_jsp._jspService","kind":"function"},{"fullyQualifiedName":"java.io.Writer.write","kind":"member","parentIndex":0}]}],"ruleId":"80","partialFingerprints":{"flawHash":"3765405848","flawHashCount":"3","flawHashOrdinal":"1","causeHash":"153293750","causeHashCount":"1","causeHashOrdinal":"1","procedureHash":"3998595118","prototypeHash":"2579117808"}},{"level":"error","rank":3,"message":{"text":"<span>This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable account.getName(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/webapp/WEB-INF/jsp/userDetail.jsp"},"region":{"startLine":116}},"logicalLocations":[{"name":"_jspService","fullyQualifiedName":"com.veracode.compiledjsp.xinsecurebankwar.WEB_002dINF.jsp.userDetail_jsp._jspService","kind":"function"},{"fullyQualifiedName":"java.io.Writer.write","kind":"member","parentIndex":0}]}],"ruleId":"80","partialFingerprints":{"flawHash":"3765405848","flawHashCount":"3","flawHashOrdinal":"2","causeHash":"153293750","causeHashCount":"1","causeHashOrdinal":"1","procedureHash":"3998595118","prototypeHash":"2579117808"}},{"level":"error","rank":3,"message":{"text":"<span>This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable account.getSurname(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/webapp/WEB-INF/jsp/userDetail.jsp"},"region":{"startLine":118}},"logicalLocations":[{"name":"_jspService","fullyQualifiedName":"com.veracode.compiledjsp.xinsecurebankwar.WEB_002dINF.jsp.userDetail_jsp._jspService","kind":"function"},{"fullyQualifiedName":"java.io.Writer.write","kind":"member","parentIndex":0}]}],"ruleId":"80","partialFingerprints":{"flawHash":"3765405848","flawHashCount":"3","flawHashOrdinal":"3","causeHash":"153293750","causeHashCount":"1","causeHashOrdinal":"1","procedureHash":"3998595118","prototypeHash":"2579117808"}},{"level":"error","rank":3,"message":{"text":"<span>This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable transferbean.getDescription(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/webapp/WEB-INF/jsp/transferCheck.jsp"},"region":{"startLine":109}},"logicalLocations":[{"name":"_jspService","fullyQualifiedName":"com.veracode.compiledjsp.xinsecurebankwar.WEB_002dINF.jsp.transferCheck_jsp._jspService","kind":"function"},{"fullyQualifiedName":"java.io.Writer.write","kind":"member","parentIndex":0}]}],"ruleId":"80","partialFingerprints":{"flawHash":"3765405848","flawHashCount":"1","flawHashOrdinal":"1","causeHash":"153293750","causeHashCount":"1","causeHashOrdinal":"1","procedureHash":"3951328964","prototypeHash":"433617841"}},{"level":"error","rank":3,"message":{"text":"<span>This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable url. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/webapp/WEB-INF/jsp/dashboard.jsp"},"region":{"startLine":128}},"logicalLocations":[{"name":"_jspx_meth_c_005fforEach_005f0","fullyQualifiedName":"com.veracode.compiledjsp.xinsecurebankwar.WEB_002dINF.jsp.dashboard_jsp._jspx_meth_c_005fforEach_005f0","kind":"function"},{"fullyQualifiedName":"java.io.Writer.write","kind":"member","parentIndex":0}]}],"ruleId":"80","partialFingerprints":{"flawHash":"452577826","flawHashCount":"1","flawHashOrdinal":"1","causeHash":"3152667479","causeHashCount":"1","causeHashOrdinal":"1","procedureHash":"27980374","prototypeHash":"3753412917"}},{"level":"error","rank":3,"message":{"text":"<span>This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable url. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/webapp/WEB-INF/jsp/dashboard.jsp"},"region":{"startLine":170}},"logicalLocations":[{"name":"_jspx_meth_c_005fforEach_005f1","fullyQualifiedName":"com.veracode.compiledjsp.xinsecurebankwar.WEB_002dINF.jsp.dashboard_jsp._jspx_meth_c_005fforEach_005f1","kind":"function"},{"fullyQualifiedName":"java.io.Writer.write","kind":"member","parentIndex":0}]}],"ruleId":"80","partialFingerprints":{"flawHash":"452577826","flawHashCount":"1","flawHashOrdinal":"1","causeHash":"3152667479","causeHashCount":"1","causeHashOrdinal":"1","procedureHash":"2047383885","prototypeHash":"3793275498"}},{"level":"warning","rank":2,"message":{"text":"<span>This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set.  Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session. </span> <span>Set the Secure attribute for all cookies used by HTTPS sessions.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/614.html\">CWE</a> <a href=\"https://owasp.org/www-community/controls/SecureCookieAttribute\">OWASP</a></span>"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"com/example/controllers/TransferController.java"},"region":{"startLine":59}},"logicalLocations":[{"name":"newTransferForm","fullyQualifiedName":"com.example.controllers.TransferController.newTransferForm","kind":"function"},{"fullyQualifiedName":"javax.servlet.http.HttpServletResponse.addCookie","kind":"member","parentIndex":0}]}],"ruleId":"614","partialFingerprints":{"flawHash":"2252828952","flawHashCount":"1","flawHashOrdinal":"1","causeHash":"4196291518","causeHashCount":"1","causeHashOrdinal":"1","procedureHash":"3648415020","prototypeHash":"925217964"}}]}]}